# Dockerfile.static - Robust version
FROM node:22-alpine AS builder

# Install required build tools
RUN apk add --no-cache git make python3 g++ gcc

# Clone and build grist-static
RUN git clone https://github.com/develdj/grist-static.git /app
WORKDIR /app

# Debug: Show repository contents
RUN echo "Repository contents:" && ls -la

# Install dependencies and build
RUN if [ -f "package.json" ]; then \
        echo "Found package.json, installing dependencies..." && \
        npm install; \
    else \
        echo "No package.json found"; \
    fi

RUN if [ -f "Makefile" ]; then \
        echo "Found Makefile, running build..." && \
        make requirements || true && \
        make build || true && \
        make package || true; \
    elif [ -f "package.json" ] && grep -q "\"build\"" package.json; then \
        echo "Running npm build script..." && \
        npm run build || true; \
    else \
        echo "No build process found"; \
    fi

# Create a staging directory with all potential output
RUN mkdir -p /output && \
    (cp -r dist/* /output/ 2>/dev/null || true) && \
    (cp -r public/* /output/ 2>/dev/null || true) && \
    (cp -r build/* /output/ 2>/dev/null || true) && \
    (cp -r out/* /output/ 2>/dev/null || true) && \
    (cp *.html /output/ 2>/dev/null || true) && \
    (cp *.js /output/ 2>/dev/null || true) && \
    (cp *.css /output/ 2>/dev/null || true) && \
    (cp -r static/* /output/ 2>/dev/null || true)

# If output is still empty, copy everything
RUN if [ -z "$(ls -A /output)" ]; then \
        echo "No built files found, copying entire repository..." && \
        cp -r /app/* /output/; \
    fi

# Production stage
FROM nginx:alpine

# Copy the output
COPY --from=builder /output /usr/share/nginx/html

# Create a simple nginx config
RUN cat > /etc/nginx/conf.d/default.conf <<EOF
server {
    listen 80;
    server_name _;
    root /usr/share/nginx/html;
    index index.html index.htm;
    
    location / {
        try_files \$uri \$uri/ /index.html =404;
    }
    
    location /api/ {
        proxy_pass http://grist:8484/;
        proxy_http_version 1.1;
        proxy_set_header Upgrade \$http_upgrade;
        proxy_set_header Connection 'upgrade';
        proxy_set_header Host \$host;
        proxy_cache_bypass \$http_upgrade;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }
}
EOF

EXPOSE 80
CMD ["nginx", "-g", "daemon off;"]
