FROM node:22-bookworm AS builder

WORKDIR /grist

# Copy package files
COPY package.json yarn.lock /grist/

# Install dependencies
RUN yarn install --frozen-lockfile --network-timeout 600000

# Copy all source files
COPY . /grist/

# Build the production app and verify output
RUN yarn run build:prod && \
    echo "Build complete. Checking output:" && \
    ls -la /grist/ && \
    ls -la /grist/_build/ 2>/dev/null || true

FROM dustynv/cuda-python:r36.4.0-cu128-24.04

# Install Node.js
RUN apt-get update && \
    apt-get install -y ca-certificates curl gnupg && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs \
        libexpat1 \
        libsqlite3-0 \
        procps \
        tini && \
    rm -rf /var/lib/apt/lists/*

# Install minimal Python packages
RUN pip3 install --no-cache-dir --break-system-packages \
    six python-dateutil chardet sortedcontainers iso8601 openpyxl || true

# Create directories
RUN mkdir -p /persist/docs /grist

# IMPORTANT: Copy ALL files from builder, not just /grist
COPY --from=builder /grist/ /grist/

# Verify files were copied
RUN echo "Verifying copied files:" && \
    ls -la /grist/ && \
    test -d /grist/_build && echo "_build directory found" || echo "_build missing" && \
    test -d /grist/node_modules && echo "node_modules found" || echo "node_modules missing"

WORKDIR /grist

# Create startup script
RUN echo '#!/bin/bash' > /start.sh && \
    echo 'cd /grist' >> /start.sh && \
    echo '' >> /start.sh && \
    echo 'if [ -f "_build/app/server/mergedServerMain.js" ]; then' >> /start.sh && \
    echo '  echo "Starting Grist server..."' >> /start.sh && \
    echo '  exec node _build/app/server/mergedServerMain.js' >> /start.sh && \
    echo 'else' >> /start.sh && \
    echo '  echo "ERROR: Server file not found!"' >> /start.sh && \
    echo '  echo "Contents of /grist:"' >> /start.sh && \
    echo '  ls -la /grist/' >> /start.sh && \
    echo '  echo "Contents of /grist/_build (if exists):"' >> /start.sh && \
    echo '  ls -la /grist/_build/ 2>/dev/null || echo "No _build directory"' >> /start.sh && \
    echo '  exit 1' >> /start.sh && \
    echo 'fi' >> /start.sh && \
    chmod +x /start.sh

ENV GRIST_HOST=0.0.0.0 \
    GRIST_PORT=8484 \
    GRIST_SINGLE_PORT=true \
    GRIST_SERVE_SAME_ORIGIN=true \
    GRIST_DATA_DIR=/persist/docs \
    GRIST_SANDBOX_FLAVOR=unsandboxed \
    NODE_ENV=production \
    TYPEORM_DATABASE=/persist/home.sqlite3

EXPOSE 8484

CMD ["/start.sh"]
