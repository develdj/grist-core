FROM dustynv/cuda-python:r36.4.0-cu128-24.04

# Install all dependencies
RUN apt-get update && \
    apt-get install -y \
        curl \
        dumb-init \
        libexpat1 \
        libsqlite3-0 \
        build-essential \
        python3 \
        make \
        g++ \
        git && \
    curl -fsSL https://deb.nodesource.com/setup_22.x | bash - && \
    apt-get install -y nodejs && \
    npm install -g yarn && \
    rm -rf /var/lib/apt/lists/*

# Install Python packages
RUN pip3 install --index-url https://pypi.org/simple/ \
    --no-cache-dir --break-system-packages \
    six python-dateutil chardet sortedcontainers iso8601 openpyxl || true

# Create user
RUN useradd -ms /bin/bash grist && \
    mkdir -p /persist/docs && \
    chown -R grist:grist /persist

# Build in /app
WORKDIR /app
COPY . /app

RUN yarn install --frozen-lockfile --network-timeout 600000 && \
    yarn run build:prod && \
    echo "=== Build complete ===" && \
    ls -la /app/_build/app/server/ && \
    chown -R grist:grist /app

# Create comprehensive startup script
RUN cat > /start.sh << 'EOF'
#!/bin/bash
echo "Starting Grist server..."
echo "Working directory: $(pwd)"
echo "Checking /app contents:"
ls -la /app/ | head -20
echo "Checking /app/_build:"
if [ -d /app/_build ]; then
    echo "_build exists"
    ls -la /app/_build/app/server/ 2>/dev/null || echo "No server directory"
else
    echo "_build MISSING!"
fi

cd /app

# Try different possible entry points
if [ -f "_build/app/server/devServerMain.js" ]; then
    echo "Starting devServerMain.js..."
    exec node _build/app/server/devServerMain.js
elif [ -f "_build/app/server/MergedServer.js" ]; then
    echo "Starting MergedServer.js..."
    exec node _build/app/server/MergedServer.js
elif [ -f "sandbox/grist/main.py" ]; then
    echo "Trying Python entry point..."
    exec python3 sandbox/grist/main.py
else
    echo "ERROR: No entry point found!"
    echo "Available JS files:"
    find /app -name "*.js" -type f | grep -E "(main|server|start)" | head -20
    # Keep container alive for debugging
    tail -f /dev/null
fi
EOF

RUN chmod +x /start.sh && chown grist:grist /start.sh

USER grist

ENV GRIST_HOST=0.0.0.0 \
    GRIST_PORT=8484 \
    GRIST_DATA_DIR=/persist/docs \
    GRIST_SANDBOX_FLAVOR=unsandboxed \
    NODE_ENV=production \
    HOME=/home/grist

EXPOSE 8484

WORKDIR /app
CMD ["/start.sh"]
