################################################################################
## Jetson Orin AGX Optimized Grist Dockerfile with CUDA support
################################################################################
FROM scratch AS ext

################################################################################
## Javascript build stage - Keep this as-is for building
################################################################################
FROM node:22-bookworm AS builder

WORKDIR /grist
COPY package.json yarn.lock /grist/

# Install dependencies
RUN \
  yarn install --frozen-lockfile --verbose --network-timeout 600000 && \
  yarn global add --verbose --network-timeout 600000 node-gyp node-pre-gyp node-gyp-build node-gyp-build-optional-packages && \
  yarn install --prod --frozen-lockfile --modules-folder=node_modules_prod --verbose --network-timeout 600000

COPY --from=ext / /grist/ext
RUN \
 mkdir /node_modules && \
 cd /grist/ext && \
 { if [ -e package.json ] ; then yarn install --frozen-lockfile --modules-folder=/node_modules --verbose --network-timeout 600000 ; fi }

# Build node code
COPY tsconfig.json /grist
COPY tsconfig-ext.json /grist
COPY tsconfig-prod.json /grist
COPY test/tsconfig.json /grist/test/tsconfig.json
COPY test/chai-as-promised.js /grist/test/chai-as-promised.js
COPY app /grist/app
COPY stubs /grist/stubs
COPY buildtools /grist/buildtools
COPY static/locales /grist/static/locales

RUN WEBPACK_EXTRA_MODULE_PATHS=/node_modules yarn run build:prod
RUN rm -rf /grist/static/locales

# Prepare pyodide sandbox
COPY sandbox/pyodide /grist/sandbox/pyodide
COPY sandbox/requirements.txt /grist/sandbox/requirements.txt
RUN cd /grist/sandbox/pyodide && make setup || echo "Pyodide setup skipped for ARM64"

################################################################################
## Run-time stage - Using Jetson-optimized base image
################################################################################
FROM dustynv/cuda-python:r36.4.0-cu128-24.04

ARG GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING=false

# Install Node.js 22 and other required packages
RUN apt-get update && \
    apt-get install -y ca-certificates curl gnupg && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_22.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y \
        nodejs \
        libexpat1 \
        libsqlite3-0 \
        procps \
        tini \
        build-essential && \
    rm -rf /var/lib/apt/lists/*

# Verify Node installation
RUN node --version && npm --version

# Configure pip to use Jetson PyPI repository
RUN mkdir -p ~/.config/pip && \
    echo "[global]" > ~/.config/pip/pip.conf && \
    echo "extra-index-url = https://pypi.jetson-ai-lab.io/jp6/cu129" >> ~/.config/pip/pip.conf && \
    echo "trusted-host = pypi.jetson-ai-lab.io" >> ~/.config/pip/pip.conf

# Copy requirements
COPY sandbox/requirements.txt /tmp/requirements.txt

# Install Python packages using Jetson-optimized repository
RUN pip3 install --no-cache-dir --break-system-packages \
    --extra-index-url https://pypi.jetson-ai-lab.io/jp6/cu129 \
    -r /tmp/requirements.txt || \
    (echo "Some packages failed to install, attempting individually..." && \
     for package in $(cat /tmp/requirements.txt | grep -v '^#' | grep -v '^$'); do \
        pip3 install --no-cache-dir --break-system-packages \
            --extra-index-url https://pypi.jetson-ai-lab.io/jp6/cu129 \
            "$package" || echo "Warning: Failed to install $package"; \
     done) && \
    rm /tmp/requirements.txt

# Create persist directory
RUN mkdir -p /persist/docs

# Copy built assets from builder
COPY --from=builder /node_modules /node_modules
COPY --from=builder /grist/node_modules_prod /grist/node_modules
COPY --from=builder /grist/_build /grist/_build
COPY --from=builder /grist/static /grist/static-built
COPY --from=builder /grist/app/cli.sh /grist/cli
COPY --from=builder /grist/ext/asset[s] /grist/ext/assets

# Add Grist files
COPY package.json /grist/package.json
COPY bower_components /grist/bower_components
COPY sandbox /grist/sandbox
COPY plugins /grist/plugins
COPY static /grist/static

# Copy pyodide if built successfully
COPY --from=builder /grist/sandbox/pyodide /grist/sandbox/pyodide

# Finalize static directory
RUN \
  mv /grist/static-built/* /grist/static && \
  rmdir /grist/static-built

# Create grist user
RUN useradd -ms /bin/bash grist

# Set up Python path to use the optimized Python from the base image
ENV PYTHON_BIN=/usr/bin/python3

WORKDIR /grist

# Environment variables optimized for Jetson
ENV \
  GRIST_ORG_IN_PATH=true \
  GRIST_HOST=0.0.0.0 \
  GRIST_SINGLE_PORT=true \
  GRIST_SERVE_SAME_ORIGIN=true \
  GRIST_DATA_DIR=/persist/docs \
  GRIST_INST_DIR=/persist \
  GRIST_SESSION_COOKIE=grist_core \
  GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING=${GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING} \
  GRIST_SANDBOX_FLAVOR=unsandboxed \
  NODE_OPTIONS="--no-deprecation --max-old-space-size=4096" \
  NODE_ENV=production \
  TYPEORM_DATABASE=/persist/home.sqlite3 \
  PYTHONPATH=/usr/local/lib/python3.10/dist-packages:$PYTHONPATH \
  PIP_EXTRA_INDEX_URL=https://pypi.jetson-ai-lab.io/jp6/cu129

# Expose port
EXPOSE 8484

ENTRYPOINT ["./sandbox/docker_entrypoint.sh"]
CMD ["node", "./sandbox/supervisor.mjs"]
