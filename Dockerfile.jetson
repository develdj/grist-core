################################################################################
## Jetson Orin AGX Optimized Grist Dockerfile with CUDA support
################################################################################
FROM scratch AS ext

################################################################################
## Javascript build stage
################################################################################
FROM node:22-bookworm AS builder

WORKDIR /grist
COPY package.json yarn.lock /grist/

RUN \
  yarn install --frozen-lockfile --verbose --network-timeout 600000 && \
  yarn global add --verbose --network-timeout 600000 node-gyp node-pre-gyp node-gyp-build node-gyp-build-optional-packages && \
  yarn install --prod --frozen-lockfile --modules-folder=node_modules_prod --verbose --network-timeout 600000

COPY --from=ext / /grist/ext
RUN \
 mkdir /node_modules && \
 cd /grist/ext && \
 { if [ -e package.json ] ; then yarn install --frozen-lockfile --modules-folder=/node_modules --verbose --network-timeout 600000 ; fi }

# Build node code
COPY tsconfig.json /grist
COPY tsconfig-ext.json /grist
COPY tsconfig-prod.json /grist
COPY test/tsconfig.json /grist/test/tsconfig.json
COPY test/chai-as-promised.js /grist/test/chai-as-promised.js
COPY app /grist/app
COPY stubs /grist/stubs
COPY buildtools /grist/buildtools
COPY static/locales /grist/static/locales

RUN WEBPACK_EXTRA_MODULE_PATHS=/node_modules yarn run build:prod
RUN rm -rf /grist/static/locales

# Copy sandbox files for pyodide
COPY sandbox /grist/sandbox
RUN cd /grist/sandbox/pyodide && make setup || echo "Pyodide setup skipped for ARM64"

################################################################################
## Run-time stage - Using Jetson-optimized base image
################################################################################
FROM dustynv/cuda-python:r36.4.0-cu128-24.04

ARG GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING=false

# Install Node.js and required packages
RUN apt-get update && \
    apt-get install -y ca-certificates curl gnupg && \
    mkdir -p /etc/apt/keyrings && \
    curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg && \
    echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_22.x nodistro main" | tee /etc/apt/sources.list.d/nodesource.list && \
    apt-get update && \
    apt-get install -y \
        nodejs \
        libexpat1 \
        libsqlite3-0 \
        procps \
        tini \
        build-essential && \
    rm -rf /var/lib/apt/lists/*

# Copy requirements
COPY sandbox/requirements.txt /tmp/requirements.txt

# Install Python packages with better fallback strategy
RUN python3 -m pip install --upgrade pip && \
    echo "Installing Python packages..." && \
    timeout 300 python3 -m pip install --no-cache-dir --break-system-packages \
        --index-url https://pypi.org/simple \
        --extra-index-url https://pypi.jetson-ai-lab.io/jp6/cu129 \
        -r /tmp/requirements.txt 2>/dev/null || \
    (echo "Fallback: Installing essential packages only..." && \
     python3 -m pip install --no-cache-dir --break-system-packages \
        six python-dateutil chardet sortedcontainers iso8601 2>/dev/null || \
     echo "Warning: Some Python packages not installed") && \
    rm -f /tmp/requirements.txt

# Create directory structure
RUN mkdir -p /persist/docs /grist

# Copy all Grist files first
COPY --from=builder /grist /grist

# Copy built assets (overwrites source files with built versions)
COPY --from=builder /node_modules /node_modules
COPY --from=builder /grist/node_modules_prod /grist/node_modules
COPY --from=builder /grist/_build /grist/_build
COPY --from=builder /grist/static /grist/static-built

# Copy application files
COPY package.json /grist/package.json
COPY bower_components /grist/bower_components
COPY plugins /grist/plugins
COPY static /grist/static

# Merge static files
RUN if [ -d /grist/static-built ]; then \
      cp -rf /grist/static-built/* /grist/static/ && \
      rm -rf /grist/static-built; \
    fi

# Ensure sandbox files are in place and executable
COPY sandbox /grist/sandbox
RUN chmod +x /grist/sandbox/docker_entrypoint.sh && \
    chmod +x /grist/sandbox/supervisor.mjs && \
    ls -la /grist/sandbox/

# Create a simple startup script
RUN echo '#!/bin/bash' > /startup.sh && \
    echo 'cd /grist' >> /startup.sh && \
    echo 'exec /grist/sandbox/docker_entrypoint.sh "$@"' >> /startup.sh && \
    chmod +x /startup.sh

# Create user
RUN useradd -ms /bin/bash grist

WORKDIR /grist

# Environment variables
ENV \
  GRIST_ORG_IN_PATH=true \
  GRIST_HOST=0.0.0.0 \
  GRIST_SINGLE_PORT=true \
  GRIST_SERVE_SAME_ORIGIN=true \
  GRIST_DATA_DIR=/persist/docs \
  GRIST_INST_DIR=/persist \
  GRIST_SESSION_COOKIE=grist_core \
  GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING=${GRIST_ALLOW_AUTOMATIC_VERSION_CHECKING} \
  GRIST_SANDBOX_FLAVOR=unsandboxed \
  NODE_OPTIONS="--no-deprecation --max-old-space-size=4096" \
  NODE_ENV=production \
  TYPEORM_DATABASE=/persist/home.sqlite3 \
  PYTHON_BIN=/usr/bin/python3 \
  PATH=/grist:$PATH

EXPOSE 8484

# Use absolute path
ENTRYPOINT ["/startup.sh"]
CMD ["node", "./sandbox/supervisor.mjs"]
